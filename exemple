# -*- coding: utf-8 -*-
"""JuniorAnalyst_Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NJcYTglBd5tN-5rTV-Iz-mNBelwY5qmA

# Data from Kaggle

Data was obatined in Kaggle at: https://www.kaggle.com/competitions/titanic/data

Important informations from Kaggle:

**Variable Notes**
---

pclass: A proxy for socio-economic status (SES)
1st = Upper ;
2nd = Middle ;
3rd = Lower ;
---

age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5

sibsp: The dataset defines family relations in this way...

Sibling = brother, sister, stepbrother, stepsister

Spouse = husband, wife (mistresses and fianc√©s were ignored)

parch: The dataset defines family relations in this way...

Parent = mother, father

Child = daughter, son, stepdaughter, stepson

Some children travelled only with a nanny, therefore parch=0 for them.

# Analising data
Importing csv files.
"""

import pandas as pd

gender_data = pd.read_csv('gender_submission.csv')
test_data = pd.read_csv('test.csv')
train_data = pd.read_csv('train.csv')

gender_df = pd.DataFrame(gender_data)
test_df = pd.DataFrame(test_data)
train_df = pd.DataFrame(train_data)

gender_df.head()

test_df.head()

train_df.head()

gender_df.info()

test_df.info()

train_df.info()

"""# Cleaning and processing

"""

#Combining

test_train = pd.concat([train_df, test_df], axis=0)
test_train = test_train.reset_index()
test_train.tail()

test_train.info()

test_train.isnull().sum()

test_train.isnull().mean()

test_train = test_train.drop(columns=['Cabin'], axis=1)

test_train['Age'] = test_train['Age'].fillna(test_train['Age'].mean())
test_train['Fare'] = test_train['Fare'].fillna(test_train['Fare'].mean())

test_train['Embarked'] = test_train['Embarked'].fillna(test_train['Embarked'].mode()[0])

test_train.isnull().sum()



"""# In Train data:"""

new_train_df = test_train.iloc[:891].copy()

new_train_df

"""## What percentage of passengers survived the Titanic?"""

survived = new_train_df["Survived"].sum()
dead = len(new_train_df) - survived
percent_survived = 100*(survived/len(train_df))
print(f"Percentage of passengers who survived = {percent_survived:.2f} %")

colors = ['blue', 'orange']
plt.bar(['Survived', 'Dead'], [survived, dead], color = colors)
plt.xlabel('Status')
plt.ylabel('Count')
plt.title('Survived vs Dead Passengers')
plt.show()

"""##  What was the survival rate for males vs. females?

"""

import matplotlib.pyplot as plt

def plot_columns(x='', y=''):
    survived = new_train_df.loc[new_train_df[x] == 1, :][y].value_counts()
    data_plot = pd.DataFrame([survived])
    data_plot.index = ['survived']
    data_plot.plot(kind='bar', rot=0)
    plt.show()
    return data_plot

plot_columns(x='Survived',y='Sex')

# Survival rate

man_survival_rate = ((109)/(233+109))*100
female_survival_rate = ((233)/(233+109))*100
difference = female_survival_rate-man_survival_rate

print(f"Male survived rate: {man_survival_rate:.2f} %")
print(f"Female survived rate: {female_survival_rate:.2f} %")
print(f"The percentage difference was: {difference:.2f} %")

"""##  What was the survival rate for different passenger classes?

"""

plot_columns(x='Survived',y='Pclass')

# Survival rate

upper_survival_rate = ((136)/(136+119+87))*100
middle_survival_rate = ((87)/(136+119+87))*100
lower_survival_rate = ((119)/(136+119+87))*100

print(f"Upper class survived rate: {upper_survival_rate:.2f} %")
print(f"Middle class survived rate: {middle_survival_rate:.2f} %")
print(f"Lower class survived rate: {lower_survival_rate:.2f} %")

"""##  Were passengers with family members more likely to survive than those without?"""

'''Both sibsp and parch values represent families, so we can join the values between them to analyze the survival vs. family cases. '''


new_train_df['Family'] = (new_train_df['SibSp'] == 1) | (new_train_df['Parch'] == 1)
new_train_df['Family'] = new_train_df['Family'].replace({False: 'Alone', True: 'With Family'})

plot_columns(x='Survived',y='Family')

# Survival rate

Alone = ((199)/(199+143))*100
With_Family = ((143)/(199+143))*100
Difference_Family = Alone - With_Family

print(f"The  survival rate of passengers without family was: {Alone:.2f} %")
print(f"The  survival rate of passengers with family was: {With_Family:.2f} %")
print(f"The difference of rate between them was: {Difference_Family:.2f} %")

"""#  What was the average fare for each passenger class and how does it relate to survival?"""

import seaborn as sns
import numpy as np

sns.histplot(new_train_df['Fare'], kde=True)

sns.boxplot(x='Pclass', y='Fare', data=new_train_df)
plt.xlabel('Pclass')
plt.ylabel('Fare')
plt.title('Fare distribution per class')
plt.show()

new_train_df['Fare'] = np.log(new_train_df['Fare']+1)

sns.histplot(new_train_df['Fare'], kde=True)

sns.boxplot(x='Pclass', y='Fare', data=new_train_df)
plt.xlabel('Pclass')
plt.ylabel('Fare')
plt.title('Fare distribution per class')
plt.show()

Fare_survival = sns.FacetGrid(new_train_df, col = 'Survived')
Fare_survival.map(sns.histplot, 'Fare')

#Where survived "0" is the amount of dead passangers, and "1" survived.

age_analysis = sns.FacetGrid(new_train_df, hue="Survived",aspect=4)
age_analysis.map(sns.kdeplot,'Fare',fill= True)
age_analysis.set(xlim=(0, new_train_df['Fare'].max()))
age_analysis.add_legend()
plt.show()

"""## What age group had the highest survival rate?"""

sns.histplot(new_train_df['Age'], kde=True)

age_analysis = sns.FacetGrid(new_train_df, hue="Survived",aspect=4)
age_analysis.map(sns.kdeplot,'Age',fill= True)
age_analysis.set(xlim=(0, new_train_df['Age'].max()))
age_analysis.add_legend()
plt.show()

